name: inverse
layout: true
class: center, middle, inverse

---

#Software installation demo
##Modules + EasyBuild

.author[Stig Rune Jensen]

.date[
16 March 2021  
]

.footnote[Slides available on [GitHub](https://github.com/stigrj/easybuild-demo)]

---

template: inverse
# Software Modules

---

layout: false
.left-column[
## Software Modules
### Intro
]
.right-column[
#### Software on your laptop
- Single user, you are king
- Typically keep only latest version
- Versions follow the OS upgrades

#### Software on a shared HPC resource
- Many users, many different software needs
- We want the environment to be as similar as possible across machines
- **Reproducibility**: Want to keep old versions when new ones arrive
- This means we need to support:
    - Different versions of the same software
    - Same software compiled with different compilers
]

---

layout: false
.left-column[
## Software Modules
### Intro
]
.right-column[
#### Need for an isolated environment
- (Scientific) software should not be installed in the global PATH
- Need some way of bringing software in and out of your environment
- Many different solutions to this:
    - Lmod (modules) + EasyBuild (installation)
    - Virtualenv + pip
    - Conda
    - Containers
    - Spack
- *We* use Lmod + EasyBuild for the scientific software stack on all our machines (Fram, Saga and Betzy)
- *Users* can use *any* of the above to manage their *own* software stack on our machines
]

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
]
.right-column[
#### Useful commands
- List currently loaded modules:
    - `module list`
- Search for available modules:
    - `module avail <software>`
- Load and unload module:
    - `module load <software>`
    - `module unload <software>`
    - `module purge` (unloads everything)
- Add and remove path to module files:
    - `module use </path/to/modules/>`
    - `module unuse </path/to/modules/>`
- Save and restore current module environment:
    - `module save <name-of-env>`
    - `module restore <name-of-env>`
    - `module savelist` (list all saves envs)
- Shorthand alias for the `module` command:
    - `ml` alias for `module list`
    - `ml <software>` alias for `module load <software>`
    - `ml <option>` alias for `module <option>`
]

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
]
.right-column[
#### Recommendations
- Keep your environment tidy, purge frequently and load from scratch
- Don't mix toolchains and compiler versions
- Don't load modules in your `.bashrc` etc.
- Make use of module save/restore for interactive work
- Be explicit in job scripts: purge first, then load all necessary modules
]

---

template: inverse
# EasyBuild

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
## EasyBuild
### Intro
]
.right-column[
#### Different ways of installing software
- Package managers in Linux: yum, apt, rpm, etc.
- Conda and pip for Python
- Packed binaries
- Containers
- Compiling from source: configure-make, cmake, etc.

**EasyBuild can be used as wrapper around all the above**
]

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
## EasyBuild
### Intro
]
.right-column[

#### EasyBuilds focus
- Targeting HPC systems
- Automation: less prone for human errors
- Reproducibility: rebuild software stack, (usually) portable to other systems
- Performance: (usually) build from source for particular hardware
- Very pedantic with versioning and dependencies (blessing and curse)

EasyBuild is tightly connected to the module system, automatically generates
module files after installation
]

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
## EasyBuild
### Intro
### Demo
]
.right-column[

#### Useful commands

- Load EasyBuild module:
    - `module avail easybuild`
    - `module load EasyBuild/4.3.3`
- Show current configuration:
    - `eb --show-config`
- Search for EB files:
    - `eb --search <software>`
    - `eb --show-ec <software>`
- Install software:
    - `eb <software> --fetch`
    - `eb <software> --dry-run`
    - `eb <software> --robot --parallel=2`
    - `eb <software> --robot --parallel=2 --prefix=</path/to/location>`
]

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
## EasyBuild
### Intro
### Demo
]
.right-column[

#### Recommendations
- Beware of disk quota in $HOME!
- Sometimes require manual download of source
- Software not awailable? Try the central EB repo, it might have been
  included there recently but didn't make it into our current release of EB
- Same software, different toolchain:
    - `eb <software> --try-toolchain=<toolchain>,<version>`
- Same software, different version:
    - Copy and modify existing easyconfig
    - Beware of cascading dependencies!
]

---

layout: false
.left-column[
## Software Modules
### Intro
### Demo
## EasyBuild
### Intro
### Demo
## Links
]
.right-column[

#### Sigma2 documentation
- Modules: https://documentation.sigma2.no/software/modulescheme.html
- Installation: https://documentation.sigma2.no/software/userinstallsw.html

#### Lmod
- Home: https://www.tacc.utexas.edu/research-development/tacc-projects/lmod
- Documentation: https://lmod.readthedocs.io/en/latest/
- GitHub repo: https://github.com/TACC/Lmod

#### EasyBuild
- Home: https://easybuild.io/
- Documentation: https://docs.easybuild.io/
- Tutorial: https://easybuilders.github.io/easybuild-tutorial/
- GitHub repo: https://github.com/easybuilders/
]

---


name: last-page
template: inverse

Slideshow created using [remark] and served using [cicero]

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
